// Forms
// ---------------------------
// Bootstrap CSS Component

// Normalize non-controls
//
// Restyle and baseline non-control form elements.

.form {
	@include gs-span(m,all);
	@include gs-media(d,min) {
		@include gs-span(d,1,8,(1,12));
	}
	// fieldset
	.controls {
		@include zero;
		min-width: 0;
		margin-bottom: rem($rhythm-unit);
		// Legend
		legend {
			display: inline-block;
			padding: 0 rem($rhythm-unit)/2;
			background: $legend-background-color;
			@include font-size($legend-font-size, $line-height: true, $margin-bottom: true);
			color: $legend-color;
			border: 0;
			border-radius: $radius;
		}
		// label
		&--label {
			display: inline-block;
			margin-bottom: 5px;
			font: {
				weight: $normal;
				family: $base-font-family;
			}
			color: $form-label-color;
			@include font-size($input-font-size, $line-height: false, $margin-bottom: false);
		}
		&--control__checkbox, &--control__radio {
			@include font-size($input-font-size, $line-height: false, $margin-bottom: false);
			color: $input-color;
			cursor: pointer;
			display: inline-block;
			padding-left: 20px;

			margin-right:  $gutter-width;
			input {
				position: absolute;
				margin: 4px 0 0 -20px;
			}
		}
		// Input groups
		.input-group {
			position: relative;
			display: table;
			border-collapse: separate;
			&__input-group-lg {
				.controls--control, .input-group--addon, .input-group--btn {
					@extend .input-lg;
					@include font-size($font-size-large, $line-height: true, $margin-bottom: false);
				}
			}
			&__input-group-sm {
				.controls--control, .input-group--addon, .input-group--btn {
					@extend .input-sm;
					@include font-size($font-size-small, $line-height: true, $margin-bottom: false);
				}
			}
			&--addon, &--btn,.controls--control {
				position: relative;
				display: table-cell;
				margin-bottom: 0;
				&:not(:first-child):not(:last-child) {
					border-radius: 0;
				}
				&:first-child { @include border-right-radius(0); }
				&:last-child { @include border-left-radius(0); }
				&:first-child > .btn { @include border-right-radius(0); }
				&:last-child > .btn { @include border-left-radius(0); }
				&:first-child > .btn:not(:first-child) { @include border-left-radius(0);}
				&:last-child > .btn:not(:last-child):not(.dropdown-toggle) { @include border-right-radius(0);}
			}
			&--addon, &--btn {
				width: 1%;
				white-space: nowrap;
				vertical-align: middle;
			}
			&--btn {
				position: relative;
				font-size: 0;
				&:first-child > .btn { border-right: 0;}
				&:last-child > .btn { border-left: 0;}
			}
			&--addon {
				padding: rem($rhythm-unit)/2 rem($rhythm-unit);
				@include font-size($input-font-size, $line-height: false, $margin-bottom: false);
				font-weight: normal;
				color: $input-color;
				text-align: center;
				background-color: $input-group-addon-background-color;
				border: 1px solid $input-group-addon-border-color;
				border-radius: $radius;
				&:first-child { border-right: 0; }
				&:last-child { border-left: 0; }
			}
			.controls--control {
				float: left;
				width: 100%;
				margin-bottom: 0;
			}
		}
		// input,select,textarea,checkbox,radiobox
		&--control {
			// normalise form controls
			height: rem($input-height-base);
			&[type="search"] { @include box-sizing(border-box); }
			&[type="radio"],&[type="checkbox"] {
				margin: 4px 0 0;
				margin-top: 1px \9; /* IE8-9 */
			}
			// Set the height of file controls to match text inputs
			&[type="file"] {
				display: block;
				border: 0;
				box-shadow: none;
				padding-left: 0;
				@include font-size($font-size-small, $line-height: false, $margin-bottom: false);
			}

			// Make range inputs behave like textual form controls
			input[type="range"] {
				display: block;
				width: 100%;
			}
			// Search inputs in iOS
			// This overrides the extra rounded corners on search inputs in iOS
			input[type="search"] {
			  -webkit-appearance: none;
			}
			// Special styles for iOS date input
			//
			// In Mobile Safari, date inputs require a pixel line-height that matches the
			// given height of the input.
			input[type="date"] {
			  line-height: $input-height-base;
			}
			// Make multiple select elements height not fixed
			select[multiple],
			select[size] {
				height: auto;
			}
			// Focus for file, radio, and checkbox
			input[type="file"]:focus,
			input[type="radio"]:focus,
			input[type="checkbox"]:focus {
				@include tab-focus();
			}
			// Adjust output element
			output {
				display: block;
				padding-top: rem($rhythm-unit);
				@include font-size($base-font-size, $line-height: true, $margin-bottom: false);
				color: $input-color;
			}
			display: block;
			width: 100%;
			@include font-size($input-font-size, $line-height: true, $margin-bottom: true);
			padding: rem($rhythm-unit)/2;
			color: $input-color;
			background-color: $input-background-color;
			background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
			border: $border-width $border-style $input-border-color;
			border-radius: $input-border-radius;
			@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
			@include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

			// Customize the `:focus` state to imitate native WebKit styles.
			@include form-control-focus();

			// Placeholder
			@include placeholder();

			// Disabled and read-only inputs
			//
			// HTML5 says that controls under a fieldset > legend:first-child won't be
			// disabled if the fieldset is disabled. Due to implementation difficulty, we
			// don't honor that edge case; we style them as disabled anyway.
			&[disabled],
			&[readonly],
			fieldset[disabled] & {
				cursor: not-allowed;
				background-color: $input-background-disabled-color;
				opacity: 1; // iOS fix for unreadable disabled content
			}
			// [converter] extracted textarea& to textarea.form-control
		}
		// Reset height for Textarea
		select {
			width: auto;
		}
		textarea  {
			height: auto;
		}
		&--note {
			color: $form-note-color;
			background: $form-note-background-color;
			border: $border-width $border-style $form-note-border-color;
			padding: rem($rhythm-unit);
			@include font-size($font-size-small, $line-height: true, $margin-bottom: true);
			i {
				@include font-size($base-font-size, $line-height: false, $margin-bottom: false);
				color: $brand-info;
				padding-right: 5px;
			}
		}
	}
	// form control sizing
	@include input-size('.controls--control.input-sm', rem($input-height-small), rem($rhythm-unit), rem($rhythm-unit), $font-size-small, $border-radius-small);
	@include input-size('.controls--control.input-lg', rem($input-height-large), rem($rhythm-unit), rem($rhythm-unit), $font-size-large,$border-radius-large);
	// inline form
	&--inline {
		@include gs-span(m,all);
		@include gs-media(m,min) {
			.controls {
				@include gs-span(m,all);
				@include gs-media(t,min) {
					width: auto;
					display: inline-block;
					clear: none;
					margin: 0 gs-gutter(d, false, true) 0 0;
					float: none;
					vertical-align: middle;
				}
				&--control {
					margin-bottom: 0;
					display: inline-block;
					&__checkbox, &__radio {
						display: inline-block;
						margin: 0;
						padding-left: 20px;
						position: relative;
						input[type="radio"], input[type="checkbox"] {
							float: none;
							position: absolute;
							margin: 4px 0 0 -20px;
						}
					}
				}
			}
			// Input groups need that 100% width though
			.input-group > .form-control {
		width: 100%;
	}
		    // Validation states
		    //
		    // Reposition the icon because it's now within a grid column and columns have
		    // `position: relative;` on them. Also accounts for the grid gutter padding.
		    // TODO: Apply an example of this when I have form validation setup
			.has-feedback .form-control-feedback {
				top: 0;
			}
		}
	}
	&--horizontal {
	width: 100%;
	.controls {
		&--label {
			@include gs-span(d,1,2,(1,12));
			margin-top: 0;
			margin-bottom: 0;
			padding-top: rem($rhythm-unit);
		}
		&--control {
			@include gs-span(d,4,12,(1,12));
			margin-top: 0;
			margin-bottom: 0;
			&__checkbox, &__radio {
					@include gs-span(d,4,12,(1,12));
					margin-top: 0;
					margin-bottom: 0;
					padding-top: rem($rhythm-unit);
					min-height: rem($rhythm-unit);
			}
		}
		&--static {
			@include gs-span(d,4,12,(1,12));
			padding-top: rem($rhythm-unit);
			@include font-size($input-font-size, $line-height: false, $margin-bottom: false);

		}
		&__buttons {
			@include gs-span(d,4,12,(1,12));
			width: auto;
			margin-top: 0;
			margin-bottom: 0;
			padding-top: rem($rhythm-unit);
		}
	}

// TODO: Sort through all this below

  // Only right align form labels here when the columns stop stacking
/*
  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: right;
    }
  }
*/

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    top: 0;
    right: ($gutter-width / 2);
  }
}
}





// Feedback states
.has-success {
  @include form-control-validation($state-success-text-color, $state-success-text-color, $state-success-background-color);
}
.has-warning {
  @include form-control-validation($state-warning-text-color, $state-warning-text-color, $state-warning-background-color);
}
.has-error {
  @include form-control-validation($state-danger-text-color, $state-danger-text-color, $state-danger-background-color);
}




// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: ($input-height-base * 1.25);
  }

  // Feedback icon (requires .glyphicon classes)
  .form-control-feedback {
    position: absolute;
    top: ($base-line-height + 5); // Height of the `label` and its margin
    right: 0;
    display: block;
    width: $input-height-base;
    height: $input-height-base;
    line-height: $input-height-base;
    text-align: center;
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  margin-bottom: 0; // Remove default margin from `p`
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($text-color, 25%); // lighten the text some for contrast
}
